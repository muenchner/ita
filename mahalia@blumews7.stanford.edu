#Author: Mahalia Miller
#Date: Jan. 21, 2012, i.e. date of Obama's second inauguration 

#import networkx as nx

class TravelTime:
  alpha = 0.15
  beta = 4
  def __init__(self, t_0, cap_0):
    self.t_0 = t_0
    self.cap_0 = cap_0

  def get_new_travel_time(self, flow):
    alpha = 0.15
    beta = 4
  
    return self.t_0*(1 + alpha*(flow/float(self.cap_0))**beta)  


def find_travel_time(G, demand):
  #G is a networkx graph
  travel_time = 0
  for (u, v) in G.edges():
    if len(G[u][v].keys()) > 0:
      for multiedge in G[u][v].keys():
        travel_time += G[u][v][multiedge]['flow']*G[u][v][multiedge]['t_a']
    else:
      travel_time += G[u][v]['flow']*G[u][v]['t_a']
  return travel_time

def compute_delay(travel_time, undamaged_travel_time = None):
  if undamaged_travel_time is not None:
    return travel_time - undamaged_travel_time
  else:
    return 0


